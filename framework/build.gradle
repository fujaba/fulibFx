plugins {
    id "java"
    id 'maven-publish'
    id 'signing'
    id "org.openjfx.javafxplugin" version "$javaFxPluginVersion"
}

group = projectGroup
version = frameworkVersion
description = 'A versatile Framework for JavaFX applications specifically designed for MVC pattern projects.'

// ------------------- Dependencies -------------------

repositories {
    mavenCentral()
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

// JavaFX dependencies
javafx {
    version = javaFxVersion
    modules = ['javafx.controls', 'javafx.graphics', 'javafx.fxml', 'javafx.media']
}

// Project dependencies
dependencies {
    implementation group: 'org.jetbrains', name: 'annotations', version: jetbrainsAnnotationsVersion
    implementation group: 'com.google.dagger', name: 'dagger', version: daggerVersion
    annotationProcessor group: 'com.google.dagger', name: 'dagger-compiler', version: daggerVersion
    implementation group: 'io.reactivex.rxjava3', name: 'rxjava', version: rxJavaVersion
}

// ------------------- Tests -------------------

// Test dependencies
dependencies {
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion
    testImplementation group: 'org.testfx', name: 'testfx-junit5', version: testFxVersion
    testImplementation group: 'org.testfx', name: 'openjfx-monocle', version: monocleVersion
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockitoVersion
    testAnnotationProcessor group: 'com.google.dagger', name: 'dagger-compiler', version: daggerVersion

    // https://mvnrepository.com/artifact/org.hamcrest/hamcrest
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.2'
}

test {
    useJUnitPlatform()
}

// ------------------- Build -------------------

java {
    sourceCompatibility = getVersionForMajor(javaSourceVersion)
    targetCompatibility = getVersionForMajor(javaTargetVersion)

    withSourcesJar()
    withJavadocJar()
}

static JavaVersion getVersionForMajor(String version) {
    return JavaVersion.values().find { (it.majorVersion == version) }
}

compileJava {
    options.encoding = "UTF-8"
}

javadoc {
    options.encoding = "UTF-8"
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jar {
    manifest {
        attributes(
                'Manifest-Version': version,
                'Class-Path': '.',
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// ------------------- Publishing -------------------

publishing.publications.create('mavenJava', MavenPublication) {
    it.artifactId = 'fulibFx'
    it.from(components.java)
    it.pom {
        name = 'fulibFx'
        description = project.description
        url = 'https://github.com/fujaba/fulibFx'
        inceptionYear = '2023'

        scm {
            url = 'https://github.com/fujaba/fulibFx'
        }

        licenses {
            license {
                name = 'MIT License'
                url = 'https://www.opensource.org/licenses/mit-license.php'
            }
        }

        developers {
            developer {
                id = 'LeStegii'
                name = 'Paul Mertens'
            }
            developer {
                id = 'Clashsoft'
                name = 'Adrian Kunz'
            }
        }
    }
}

signing.sign publishing.publications.mavenJava
