plugins {
    id "java"
    id "org.openjfx.javafxplugin" version "0.0.13"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

configurations {
    internal
    implementation.extendsFrom(internal)
}

// JavaFX dependencies
javafx {
    version = '20'
    modules = [ 'javafx.controls', 'javafx.graphics', 'javafx.fxml', 'javafx.media']
}

java {
    sourceCompatibility = getVersionForMajor(javaSourceVersion)
    targetCompatibility = getVersionForMajor(javaTargetVersion)

    if (generateSourcesJar) {
        withSourcesJar()
    }
    if (generateJavadocJar) {
        withJavadocJar()
    }
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

jar {
    from {
        configurations.internal.collect { it.isDirectory() ? it : zipTree(it) }
    }

    manifest {
        attributes(
                'Manifest-Version': version,
                'Class-Path': '.',
                "Main-Class": projectMainClass
        )
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

compileJava { options.encoding = "UTF-8" }
javadoc { options.encoding = "UTF-8" }

repositories {
    mavenCentral()
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

group projectGroup
version projectVersion

// Include local jar dependencies
dependencies {
    implementation fileTree(dir: 'libs/implementation', include: '*.jar')
    internal fileTree(dir: 'libs/internal', include: '*.jar')
}

static JavaVersion getVersionForMajor(String version) {
    return JavaVersion.values().find { (it.majorVersion == version) }
}

test {
    useJUnitPlatform()
}